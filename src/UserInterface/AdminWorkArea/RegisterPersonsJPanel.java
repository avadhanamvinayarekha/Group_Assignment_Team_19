/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.AdminWorkArea;
import Business.Profiles.AdminProfile;
import Business.UniversitySystem;
import Business.UserAccounts.UserAccount;
import Business.UserAccounts.UserAccountDirectory;

import info5100.university.example.Persona.Person;
import info5100.university.example.Persona.StudentProfile;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hp
 */
public class RegisterPersonsJPanel extends javax.swing.JPanel {
    private UniversitySystem system;
    /**
     * Creates new form RegisterPersonsJPanel
     */
    public RegisterPersonsJPanel(UniversitySystem system) {
        initComponents();
              this.system = system;
        
        
        loadPersonsTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtContact = new javax.swing.JTextField();
        lblRole = new javax.swing.JLabel();
        comboRole = new javax.swing.JComboBox<>();
        btnRegister = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        tablePersons = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitle.setText("Register New Person");

        lblName.setText("Full Name:");

        lblEmail.setText("Email:");

        jLabel4.setText("Contact:");

        lblRole.setText("Role:");

        comboRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Student", "Faculty", "Admin" }));

        btnRegister.setText("Register Person");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh Table");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        tablePersons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Person ID", "Name", "Email", "Role"
            }
        ));
        scrollPane.setViewportView(tablePersons);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(45, 45, 45)
                        .addComponent(txtContact))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblName)
                        .addGap(33, 33, 33)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEmail, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblRole, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(83, 83, 83)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEmail)
                    .addComponent(comboRole, 0, 142, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 857, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(353, 353, 353)
                        .addComponent(lblTitle)))
                .addContainerGap(54, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(302, 302, 302)
                .addComponent(btnRegister)
                .addGap(18, 18, 18)
                .addComponent(btnRefresh)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblRole)
                        .addComponent(comboRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRegister)
                    .addComponent(btnRefresh))
                .addGap(59, 59, 59)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    
        private void loadPersonsTable() {
        DefaultTableModel model = (DefaultTableModel) tablePersons.getModel();
        model.setRowCount(0); // Clear existing rows
        
        for (UserAccount ua : system.getUserAccountDirectory().getAllAccounts()) {
            Object[] row = new Object[4];
            
            if (ua.getRole().equals("STUDENT")) {
                StudentProfile sp = (StudentProfile) ua.getProfile();
                row[0] = sp.getStudentId();
                row[1] = sp.getPerson().getPersonId();
                row[2] = sp.getPerson().getEmail();
                row[3] = "Student";
            }
            else if (ua.getRole().equals("FACULTY")) {
                FacultyProfile fp = (FacultyProfile) ua.getProfile();
                row[0] = fp.getFacultyId();
                row[1] = fp.getPerson().getPersonId();
                row[2] = fp.getPerson().getEmail();
                row[3] = "Faculty";
            }
            else if (ua.getRole().equals("ADMIN")) {
                AdminProfile ap = (AdminProfile) ua.getProfile();
                row[0] = ap.getAdminId();
                row[1] = ap.getPerson().getPersonId();
                row[2] = ap.getPerson().getEmail();
                row[3] = "Admin";
            }
            
            model.addRow(row);
        }
        }
    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
                String name = txtName.getText().trim();
        String email = txtEmail.getText().trim();
        String contact = txtContact.getText().trim();
        String role = (String) comboRole.getSelectedItem();
        
        // VALIDATION
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Please enter a name.",
                "Validation Error",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (email.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Please enter an email.",
                "Validation Error",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Email format validation
        if (!email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
            JOptionPane.showMessageDialog(this,
                "Please enter a valid email address.",
                "Validation Error",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Check duplicate email
        for (Person p : system.getPersonDirectory().getPersonList()) {
            if (p.getEmail() != null && p.getEmail().equalsIgnoreCase(email)) {
                JOptionPane.showMessageDialog(this,
                    "Email already exists! Please use a different email.",
                    "Duplicate Email",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        // Check if role is selected
        if (role == null || role.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Please select a role.",
                "Validation Error",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        try {
            // Create person
            Person person = system.getPersonDirectory().newPerson(name);
            person.setEmail(email);
            person.setContactInfo(contact);
            
            // Create profile based on role
            if (role.equals("Student")) {
                StudentProfile sp = system.getStudentDirectory().newStudentProfile(person);
                sp.setDepartment("Information Systems");
                system.getUserAccountDirectory().createUserAccount(sp, email, "pass123", "STUDENT");
                
                JOptionPane.showMessageDialog(this,
                    "Student registered successfully!\n" +
                    "Username: " + email + "\n" +
                    "Password: pass123\n" +
                    "Student ID: " + sp.getStudentId(),
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
            }
            else if (role.equals("Faculty")) {
                FacultyProfile fp = system.getFacultyDirectory().newFacultyProfile(person);
                fp.setDepartment("Information Systems");
                system.getUserAccountDirectory().createUserAccount(fp, email, "pass123", "FACULTY");
                
                JOptionPane.showMessageDialog(this,
                    "Faculty registered successfully!\n" +
                    "Username: " + email + "\n" +
                    "Password: pass123\n" +
                    "Faculty ID: " + fp.getFacultyId(),
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
            }
            else if (role.equals("Admin")) {
                AdminProfile ap = new AdminProfile(person);
                system.getUserAccountDirectory().createUserAccount(ap, email, "pass123", "ADMIN");
                
                JOptionPane.showMessageDialog(this,
                    "Admin registered successfully!\n" +
                    "Username: " + email + "\n" +
                    "Password: pass123\n" +
                    "Admin ID: " + ap.getAdminId(),
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
            }
            
            // Clear fields
            txtName.setText("");
            txtEmail.setText("");
            txtContact.setText("");
            comboRole.setSelectedIndex(0);
            
            // Reload table
            loadPersonsTable();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Error registering person: " + e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }


        // TODO add your handling code here:
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
               loadPersonsTable();
        JOptionPane.showMessageDialog(this,
            "Table refreshed!",
            "Info",
            JOptionPane.INFORMATION_MESSAGE
);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRegister;
    private javax.swing.JComboBox<String> comboRole;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable tablePersons;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
