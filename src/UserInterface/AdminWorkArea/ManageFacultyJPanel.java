/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.AdminWorkArea;

import Business.UniversitySystem;
import Business.UserAccounts.UserAccount;
import Business.UserAccounts.UserAccountDirectory;
import info5100.university.example.Persona.Person;
import info5100.university.example.Persona.PersonDirectory;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import info5100.university.example.Persona.Faculty.FacultyDirectory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;

/**
 *
 * @author Hp
 */
public class ManageFacultyJPanel extends javax.swing.JPanel {
    private UniversitySystem system;
    private FacultyProfile selectedFaculty;

    /**
     * Creates new form ManageFacultyJPanel
     */
    public ManageFacultyJPanel(UniversitySystem system) {
        initComponents();
                this.system = system;
        
     
        
        loadAllFaculty();

    }
    private void loadAllFaculty() {
        ArrayList<FacultyProfile> allFaculty = new ArrayList<>(system.getFacultyDirectory().getTeacherList());
        populateTable(allFaculty);
    }
    
    private void populateTable(ArrayList<FacultyProfile> facultyList) {
        DefaultTableModel model = (DefaultTableModel) tableFaculty.getModel();
        model.setRowCount(0);
        
        for (FacultyProfile fp : facultyList) {
            Object[] row = new Object[6];
            row[0] = fp.getFacultyId();
            row[1] = fp.getPerson().getPersonId();
            row[2] = fp.getDepartment() != null ? fp.getDepartment() : "N/A";
            row[3] = fp.getPerson().getEmail();
            row[4] = fp.getOfficeLocation() != null ? fp.getOfficeLocation() : "N/A";
            row[5] = fp.getFacultyAssignments().size();
            
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblSearchBy = new javax.swing.JLabel();
        comboSearchType = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        tableFaculty = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAssignCourse = new javax.swing.JButton();

        lblTitle.setText("Manage Faculty Records");

        lblSearchBy.setText("Search By:");

        comboSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Faculty ID ", "Department" }));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        tableFaculty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Faculty ID", "Name", "Department", "Email", "Office", "Courses"
            }
        ));
        scrollPane.setViewportView(tableFaculty);

        btnEdit.setText("Edit Selected");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete Selected");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAssignCourse.setText("Assign to Course");
        btnAssignCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignCourseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(lblSearchBy)
                        .addGap(18, 18, 18)
                        .addComponent(comboSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97)
                        .addComponent(btnSearch)
                        .addGap(94, 94, 94)
                        .addComponent(btnRefresh))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(366, 366, 366)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(btnEdit)
                        .addGap(57, 57, 57)
                        .addComponent(btnDelete)
                        .addGap(38, 38, 38)
                        .addComponent(btnAssignCourse)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchBy)
                    .addComponent(comboSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnRefresh))
                .addGap(18, 18, 18)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnAssignCourse))
                .addContainerGap(31, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchType = (String) comboSearchType.getSelectedItem();
        String query = txtSearch.getText().trim();
        
        if (query.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Please enter a search term.",
                "Input Required",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        ArrayList<FacultyProfile> results = new ArrayList<>();
        
        // METHOD 1: Search by Name
        if (searchType.equals("Name")) {
            for (FacultyProfile fp : system.getFacultyDirectory().getTeacherList()) {
                String name = fp.getPerson().getPersonId().toLowerCase();
                if (name.contains(query.toLowerCase())) {
                    results.add(fp);
                }
            }
        }
        // METHOD 2: Search by Faculty ID
         else if (searchType.equals("Faculty ID") || searchType.equals("Faculty ID ")) {
            for (FacultyProfile fp : system.getFacultyDirectory().getTeacherList()) {
                String facultyId = fp.getFacultyId();
                // Try exact match first
                if (facultyId.equalsIgnoreCase(query)) {
                    results.add(fp);
                }
                // Also try partial match for user convenience
                else if (facultyId.toLowerCase().contains(query.toLowerCase())) {
                    results.add(fp);
                }
            }
        }
        // METHOD 3: Search by Department
        else if (searchType.equals("Department")) {
            for (FacultyProfile fp : system.getFacultyDirectory().getTeacherList()) {
                if (fp.getDepartment() != null && 
                    fp.getDepartment().toLowerCase().contains(query.toLowerCase())) {
                    results.add(fp);
                }
            }
        }
        
        populateTable(results);
        
        if (results.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "No faculty found matching your search.",
                "No Results",
                JOptionPane.INFORMATION_MESSAGE);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        txtSearch.setText("");
        loadAllFaculty();


        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int selectedRow = tableFaculty.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this,
                "Please select a faculty from the table.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String facultyId = (String) tableFaculty.getValueAt(selectedRow, 0);
        
        // Find faculty
        FacultyProfile faculty = null;
        for (FacultyProfile fp : system.getFacultyDirectory().getTeacherList()) {
            if (fp.getFacultyId().equals(facultyId)) {
                faculty = fp;
                break;
            }
        }
        
        if (faculty == null) return;
        
        // Show edit dialog
        String newOffice = JOptionPane.showInputDialog(this,
            "Enter office location:",
            faculty.getOfficeLocation());
        
        if (newOffice != null && !newOffice.trim().isEmpty()) {
            faculty.setOfficeLocation(newOffice);
            
            String newHours = JOptionPane.showInputDialog(this,
                "Enter office hours:",
                faculty.getOfficeHours());
            
            if (newHours != null && !newHours.trim().isEmpty()) {
                faculty.setOfficeHours(newHours);
            }
            
            JOptionPane.showMessageDialog(this,
                "Faculty updated successfully!",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
            
            loadAllFaculty();
        }


        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        
        int selectedRow = tableFaculty.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this,
                "Please select a faculty from the table.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String facultyId = (String) tableFaculty.getValueAt(selectedRow, 0);
        String name = (String) tableFaculty.getValueAt(selectedRow, 1);
        
        int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete faculty: " + name + "?",
            "Confirm Delete",
            JOptionPane.YES_NO_OPTION);
        
        if (confirm != JOptionPane.YES_OPTION) return;
        
        // Find and remove faculty
        FacultyProfile toRemove = null;
        for (FacultyProfile fp : system.getFacultyDirectory().getTeacherList()) {
            if (fp.getFacultyId().equals(facultyId)) {
                toRemove = fp;
                break;
            }
        }
        
        if (toRemove != null) {
            system.getFacultyDirectory().getTeacherList().remove(toRemove);
            
            // Remove from user accounts
            UserAccount toRemoveAccount = null;
            for (UserAccount ua : system.getUserAccountDirectory().getAllAccounts()) {
                if (ua.getRole().equals("FACULTY") && 
                    ((FacultyProfile)ua.getProfile()).getFacultyId().equals(facultyId)) {
                    toRemoveAccount = ua;
                    break;
                }
            }
            
            if (toRemoveAccount != null) {
                system.getUserAccountDirectory().deleteAccount(toRemoveAccount);
            }
            
            JOptionPane.showMessageDialog(this,
                "Faculty deleted successfully!",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
            
            loadAllFaculty();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAssignCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignCourseActionPerformed
                int selectedRow = tableFaculty.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this,
                "Please select a faculty from the table.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        JOptionPane.showMessageDialog(this,
            "Course assignment feature coming soon!\n" +
            "This will allow you to assign faculty to specific course offerings.",
            "Info",
            JOptionPane.INFORMATION_MESSAGE);


        // TODO add your handling code here:
    }//GEN-LAST:event_btnAssignCourseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignCourse;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboSearchType;
    private javax.swing.JLabel lblSearchBy;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable tableFaculty;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
