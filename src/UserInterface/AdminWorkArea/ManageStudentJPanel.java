package UserInterface.AdminWorkArea;
import Business.*;
import Business.UserAccounts.*;
import info5100.university.example.Persona.*;
import info5100.university.example.CourseSchedule.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;

/**
 *
 * @author Hp
 */
public class ManageStudentJPanel extends javax.swing.JPanel {
    private UniversitySystem system;
    private StudentProfile selectedStudent;

    /**
     * Creates new form ManageStudentJPanel
     */
    
     public ManageStudentJPanel() {
        initComponents();
    }
    public ManageStudentJPanel(UniversitySystem system) {
        initComponents();
                this.system = system;
        
       
        loadAllStudents();

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblSearchBy = new javax.swing.JLabel();
        comboSearchType = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        tableStudents = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnViewTranscript = new javax.swing.JButton();

        lblTitle.setText("Manage Student Records");

        lblSearchBy.setText("Search By:");

        comboSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Student ID", "Department" }));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        tableStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Department", "Email", "GPA", "Credits"
            }
        ));
        scrollPane.setViewportView(tableStudents);

        btnEdit.setText("Edit Selected");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete Selected");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnViewTranscript.setText("View Transcript");
        btnViewTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTranscriptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(323, 323, 323)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblSearchBy)
                        .addGap(40, 40, 40)
                        .addComponent(comboSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btnSearch)
                        .addGap(37, 37, 37)
                        .addComponent(btnRefresh)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 783, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(btnEdit)
                        .addGap(44, 44, 44)
                        .addComponent(btnDelete)
                        .addGap(37, 37, 37)
                        .addComponent(btnViewTranscript)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblTitle)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchBy)
                    .addComponent(comboSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnRefresh))
                .addGap(32, 32, 32)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnViewTranscript))
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchType = (String) comboSearchType.getSelectedItem();
        String query = txtSearch.getText().trim();
        
        if (query.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Please enter a search term.",
                "Input Required",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        ArrayList<StudentProfile> results = new ArrayList<>();
        
        // METHOD 1: Search by Name
        if (searchType.equals("Name")) {
            for (StudentProfile sp : system.getStudentDirectory().getStudentList()) {
                String name = sp.getPerson().getPersonId().toLowerCase();
                if (name.contains(query.toLowerCase())) {
                    results.add(sp);
                }
            }
        }
        // METHOD 2: Search by Student ID
        else if (searchType.equals("Student ID")) {
            for (StudentProfile sp : system.getStudentDirectory().getStudentList()) {
                if (sp.getStudentId().equalsIgnoreCase(query)) {
                    results.add(sp);
                }
            }
        }
        // METHOD 3: Search by Department
        else if (searchType.equals("Department")) {
            for (StudentProfile sp : system.getStudentDirectory().getStudentList()) {
                if (sp.getDepartment() != null && 
                    sp.getDepartment().toLowerCase().contains(query.toLowerCase())) {
                    results.add(sp);
                }
            }

        }
                // Populate table with results
        populateTable(results);
        
        if (results.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "No students found matching your search.",
                "No Results",
                JOptionPane.INFORMATION_MESSAGE);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        
        txtSearch.setText("");
        loadAllStudents();

// TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
                int selectedRow = tableStudents.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this,
                "Please select a student from the table.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String studentId = (String) tableStudents.getValueAt(selectedRow, 0);
        
        // Find student
        StudentProfile student = null;
        for (StudentProfile sp : system.getStudentDirectory().getStudentList()) {
            if (sp.getStudentId().equals(studentId)) {
                student = sp;
                break;
            }
        }
        
        if (student == null) return;
        
        // Show edit dialog (simplified version)
        String newEmail = JOptionPane.showInputDialog(this,
            "Enter new email:",
            student.getPerson().getEmail());
        
        if (newEmail != null && !newEmail.trim().isEmpty()) {
            student.getPerson().setEmail(newEmail);
            
            String newContact = JOptionPane.showInputDialog(this,
                "Enter new contact:",
                student.getPerson().getContactInfo());
            
            if (newContact != null && !newContact.trim().isEmpty()) {
                student.getPerson().setContactInfo(newContact);
            }
            
            JOptionPane.showMessageDialog(this,
                "Student updated successfully!",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
            
            loadAllStudents();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tableStudents.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this,
                "Please select a student from the table.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String studentId = (String) tableStudents.getValueAt(selectedRow, 0);
        String name = (String) tableStudents.getValueAt(selectedRow, 1);
        
        int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete student: " + name + "?",
            "Confirm Delete",
            JOptionPane.YES_NO_OPTION);
        
        if (confirm != JOptionPane.YES_OPTION) return;
        
        // Find and remove student
        StudentProfile toRemove = null;
        for (StudentProfile sp : system.getStudentDirectory().getStudentList()) {
            if (sp.getStudentId().equals(studentId)) {
                toRemove = sp;
                break;
            }
        }
        
        if (toRemove != null) {
            system.getStudentDirectory().getStudentList().remove(toRemove);
            
            // Also remove from user accounts
            UserAccount toRemoveAccount = null;
            for (UserAccount ua : system.getUserAccountDirectory().getAllAccounts()) {
                if (ua.getRole().equals("STUDENT") && 
                    ((StudentProfile)ua.getProfile()).getStudentId().equals(studentId)) {
                    toRemoveAccount = ua;
                    break;
                }
            }
            
            if (toRemoveAccount != null) {
                system.getUserAccountDirectory().deleteAccount(toRemoveAccount);
            }
            
            JOptionPane.showMessageDialog(this,
                "Student deleted successfully!",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
            
            loadAllStudents();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewTranscriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTranscriptActionPerformed
                int selectedRow = tableStudents.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this,
                "Please select a student from the table.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String studentId = (String) tableStudents.getValueAt(selectedRow, 0);
        
        // Find student
        StudentProfile student = null;
        for (StudentProfile sp : system.getStudentDirectory().getStudentList()) {
            if (sp.getStudentId().equals(studentId)) {
                student = sp;
                break;
            }
        }
        
        if (student == null) return;
        
        // Display transcript info
        StringBuilder transcript = new StringBuilder();
        transcript.append("Transcript for: ").append(student.getPerson().getPersonId()).append("\n");
        transcript.append("Student ID: ").append(student.getStudentId()).append("\n");
        transcript.append("Overall GPA: ").append(String.format("%.2f", student.getTranscript().calculateOverallGPA())).append("\n");
        transcript.append("Total Credits: ").append(student.getTranscript().getTotalCreditsEarned()).append("\n");
        transcript.append("Academic Standing: ").append(student.getTranscript().getAcademicStanding()).append("\n\n");
        
        transcript.append("Completed Courses:\n");
        for (SeatAssignment sa : student.getTranscript().getCompletedCourses()) {
            transcript.append("- ").append(sa.getCourseOffer().getCourseNumber())
                      .append(": Grade ").append(sa.getLetterGrade()).append("\n");
        }
        
        JOptionPane.showMessageDialog(this,
            transcript.toString(),
            "Student Transcript",
            JOptionPane.INFORMATION_MESSAGE);


        // TODO add your handling code here:
    }//GEN-LAST:event_btnViewTranscriptActionPerformed

private void loadAllStudents() {
        ArrayList<StudentProfile> allStudents = new ArrayList<>(system.getStudentDirectory().getStudentList());
        populateTable(allStudents);
    }
    
    private void populateTable(ArrayList<StudentProfile> students) {
        DefaultTableModel model = (DefaultTableModel) tableStudents.getModel();
        model.setRowCount(0);
        
        for (StudentProfile sp : students) {
            Object[] row = new Object[6];
            row[0] = sp.getStudentId();
            row[1] = sp.getPerson().getPersonId();
            row[2] = sp.getDepartment() != null ? sp.getDepartment() : "N/A";
            row[3] = sp.getPerson().getEmail();
            row[4] = String.format("%.2f", sp.getTranscript().calculateOverallGPA());
            row[5] = sp.getTranscript().getTotalCreditsEarned();
            
            model.addRow(row);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewTranscript;
    private javax.swing.JComboBox<String> comboSearchType;
    private javax.swing.JLabel lblSearchBy;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable tableStudents;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
