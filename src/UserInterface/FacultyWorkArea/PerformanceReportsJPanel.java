/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.FacultyWorkArea;

import Business.UniversitySystem;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import info5100.university.example.Persona.Faculty.FacultyAssignment;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.Seat;
import info5100.university.example.CourseSchedule.SeatAssignment;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.HashMap;
import java.util.Map;
/**
 *
 * @author anusha
 */
public class PerformanceReportsJPanel extends javax.swing.JFrame {
    private UniversitySystem system;
    private FacultyProfile facultyProfile;
    
    public PerformanceReportsJPanel() {
        initComponents();
    }
    
    public PerformanceReportsJPanel(UniversitySystem system, FacultyProfile faculty) {
        initComponents();
        this.system = system;
        this.facultyProfile = faculty;
        
        setTitle("Performance Reports");
        setSize(900, 700);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        tableDistribution.setDefaultEditor(Object.class, null);
        
        populateSemesterCombo();
        populateCourseCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblSemester = new javax.swing.JLabel();
        comboSemester = new javax.swing.JComboBox<>();
        lblCourse = new javax.swing.JLabel();
        comboCourse = new javax.swing.JComboBox<>();
        btnGenerate = new javax.swing.JButton();
        lblAvgGrade = new javax.swing.JLabel();
        lblEnrollment = new javax.swing.JLabel();
        lblDistribution = new javax.swing.JLabel();
        btnExport = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDistribution = new javax.swing.JTable();

        lblTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblTitle.setText("Course Performance Reports");

        lblSemester.setText("Semester:");

        comboSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblCourse.setText("Course:");

        comboCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnGenerate.setText("Generate Report");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        lblAvgGrade.setText("Average Grade: N/A");

        lblEnrollment.setText("Enrollment Count: 0");

        lblDistribution.setText("Grade Distribution:");

        btnExport.setText("Export to CSV");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        tableDistribution.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                " Grade", "Count", "Percentage"
            }
        ));
        jScrollPane1.setViewportView(tableDistribution);

        scrollPane.setViewportView(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(btnGenerate))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAvgGrade)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblCourse)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblSemester)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                    .addComponent(comboSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblEnrollment)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(lblDistribution))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(241, 241, 241)
                        .addComponent(btnExport))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(134, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTitle)
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSemester)
                    .addComponent(comboSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourse)
                    .addComponent(comboCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(btnGenerate)
                .addGap(36, 36, 36)
                .addComponent(lblAvgGrade)
                .addGap(18, 18, 18)
                .addComponent(lblEnrollment)
                .addGap(18, 18, 18)
                .addComponent(lblDistribution)
                .addGap(42, 42, 42)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                .addGap(45, 45, 45)
                .addComponent(btnExport)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>                        

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {                                            
         String semester = (String) comboSemester.getSelectedItem();
        String courseSelection = (String) comboCourse.getSelectedItem();
        
        if (semester == null || courseSelection == null || courseSelection.equals("-- Select course --")) {
            JOptionPane.showMessageDialog(this,
                "Please select semester and course.",
                "Selection Required",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String courseNumber = courseSelection.split(" - ")[0];
        
        CourseOffer selectedOffer = null;
        if (facultyProfile != null && facultyProfile.getFacultyAssignments() != null) {
            for (FacultyAssignment fa : facultyProfile.getFacultyAssignments()) {
                if (fa != null && fa.getCourseOffer() != null && 
                    fa.getCourseOffer().getCourseNumber().equals(courseNumber)) {
                    selectedOffer = fa.getCourseOffer();
                    break;
                }
            }
        }
        
        if (selectedOffer == null) {
            JOptionPane.showMessageDialog(this,
                "Could not find course data.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        double totalGradePoints = 0;
        int gradedCount = 0;
        Map<String, Integer> gradeDistribution = new HashMap<>();
        
        String[] allGrades = {"A", "A-", "B+", "B", "B-", "C+", "C", "C-", "F"};
        for (String grade : allGrades) {
            gradeDistribution.put(grade, 0);
        }
        
        int totalEnrolled = 0;
        ArrayList<Seat> seats = selectedOffer.getSeatList();
        if (seats != null) {
            for (Seat seat : seats) {
                if (seat != null && seat.isOccupied()) {
                    totalEnrolled++;
                    if (seat.seatassignment != null) {
                        SeatAssignment sa = seat.seatassignment;
                        String grade = sa.getLetterGrade();
                        
                        if (grade != null && !grade.equals("IP")) {
                            totalGradePoints += sa.getGradePoints();
                            gradedCount++;
                            if (gradeDistribution.containsKey(grade)) {
                                gradeDistribution.put(grade, gradeDistribution.get(grade) + 1);
                            }
                        }
                    }
                }
            }
        }
        
        double avgGrade = gradedCount > 0 ? totalGradePoints / gradedCount : 0.0;
        
        lblAvgGrade.setText("Average Grade: " + String.format("%.2f", avgGrade));
        lblEnrollment.setText("Enrollment Count: " + totalEnrolled);
        
        DefaultTableModel model = (DefaultTableModel) tableDistribution.getModel();
        model.setRowCount(0);
        
        for (String grade : allGrades) {
            int count = gradeDistribution.get(grade);
            double percentage = gradedCount > 0 ? (count * 100.0 / gradedCount) : 0.0;
            
            Object[] row = {grade, count, String.format("%.1f%%", percentage)};
            model.addRow(row);
        }
        
        JOptionPane.showMessageDialog(this,
            "Report generated successfully!",
            "Success",
            JOptionPane.INFORMATION_MESSAGE);
    

// TODO add your handling code here:
    }                                           

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {                                          
        
JOptionPane.showMessageDialog(this,
            "Export to CSV feature coming soon!\n\n" +
            "This would save the report to a CSV file.",
            "Export Feature",
            JOptionPane.INFORMATION_MESSAGE);
// TODO add your handling code here:
    }                                         
  private void populateSemesterCombo() {
        comboSemester.removeAllItems();
        if (system != null && system.getDepartment() != null && 
            system.getDepartment().getMasterCourseCatalog() != null) {
            for (String semester : system.getDepartment().getMasterCourseCatalog().keySet()) {
                comboSemester.addItem(semester);
            }
        }
        
        if (comboSemester.getItemCount() == 0) {
            comboSemester.addItem("Fall2025");
        }
    }

    private void populateCourseCombo() {
        comboCourse.removeAllItems();
        comboCourse.addItem("-- Select course --");
        
        if (facultyProfile != null && facultyProfile.getFacultyAssignments() != null) {
            for (FacultyAssignment fa : facultyProfile.getFacultyAssignments()) {
                try {
                    if (fa != null && fa.getCourseOffer() != null) {
                        CourseOffer offer = fa.getCourseOffer();
                        String courseName = offer.getSubjectCourse() != null ? 
                            offer.getSubjectCourse().getName() : "Unknown";
                        comboCourse.addItem(offer.getCourseNumber() + " - " + courseName);
                    }
                } catch (Exception e) {
                    System.err.println("Error adding course: " + e.getMessage());
                }
            }
        }
    }

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(PerformanceReportsJPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(() -> {
            Business.UniversitySystem testSystem = Business.ConfigureSystem.configure();
            Business.UserAccounts.UserAccount testUser = testSystem.getUserAccountDirectory().getAllAccounts().get(1);
            FacultyProfile faculty = (FacultyProfile) testUser.getProfile();
            new PerformanceReportsJPanel(testSystem, faculty).setVisible(true);
        });
    }


    // Variables declaration - do not modify                     
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JComboBox<String> comboCourse;
    private javax.swing.JComboBox<String> comboSemester;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAvgGrade;
    private javax.swing.JLabel lblCourse;
    private javax.swing.JLabel lblDistribution;
    private javax.swing.JLabel lblEnrollment;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable tableDistribution;
    // End of variables declaration                   
}
