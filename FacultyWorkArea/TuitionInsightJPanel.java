/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.FacultyWorkArea;

import Business.UniversitySystem;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import info5100.university.example.Persona.Faculty.FacultyAssignment;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.Seat;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
/**
 *
 * @author anusha
 */
public class TuitionInsightJPanel extends javax.swing.JFrame {
    
    private UniversitySystem system;
    private FacultyProfile facultyProfile;
    private static final double PRICE_PER_CREDIT = 1500.0;
    
    public TuitionInsightJPanel() {
        initComponents();
    }
    
    public TuitionInsightJPanel(UniversitySystem system, FacultyProfile faculty) {
        initComponents();
        this.system = system;
        this.facultyProfile = faculty;
        
        setTitle("Tuition Insight");
        setSize(900, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        tableCourses.setDefaultEditor(Object.class, null);
        
        loadTuitionData();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCourses = new javax.swing.JTable();

        lblTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblTitle.setText("Tuition Collection Insight");

        lblTotal.setText("Total Revenue: $0.00");

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        tableCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Course ID", "Name", "Enrolled", "Tuition/Student", "Total"
            }
        ));
        jScrollPane1.setViewportView(tableCourses);

        scrollPane.setViewportView(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(lblTotal)
                        .addGap(138, 138, 138)
                        .addComponent(btnRefresh))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(lblTitle)
                .addGap(69, 69, 69)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(lblTotal))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(btnRefresh)))
                .addContainerGap(148, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadTuitionData();
        javax.swing.JOptionPane.showMessageDialog(this,
            "Tuition data refreshed!",
            "Refreshed",
            javax.swing.JOptionPane.INFORMATION_MESSAGE);
// TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshActionPerformed
 private void loadTuitionData() {
        DefaultTableModel model = (DefaultTableModel) tableCourses.getModel();
        model.setRowCount(0);
        
        double grandTotal = 0;
        
        if (facultyProfile == null || facultyProfile.getFacultyAssignments() == null) {
            model.addRow(new Object[]{"Error", "No faculty profile", 0, "$0.00", "$0.00"});
            lblTotal.setText("Total Revenue: $0.00");
            return;
        }
        
        ArrayList<FacultyAssignment> assignments = facultyProfile.getFacultyAssignments();
        
        if (assignments.isEmpty()) {
            model.addRow(new Object[]{"-", "No courses assigned", 0, "$0.00", "$0.00"});
            lblTotal.setText("Total Revenue: $0.00");
            return;
        }
        
        for (FacultyAssignment fa : assignments) {
            try {
                if (fa == null || fa.getCourseOffer() == null) continue;
                
                CourseOffer offer = fa.getCourseOffer();
                
                int enrolled = 0;
                ArrayList<Seat> seats = offer.getSeatList();
                if (seats != null) {
                    for (Seat seat : seats) {
                        if (seat != null && seat.isOccupied()) {
                            enrolled++;
                        }
                    }
                }
                
                int credits = offer.getCreditHours();
                double tuitionPerStudent = credits * PRICE_PER_CREDIT;
                double totalCollected = tuitionPerStudent * enrolled;
                grandTotal += totalCollected;
                
                String courseNumber = offer.getCourseNumber() != null ? offer.getCourseNumber() : "N/A";
                String courseName = "Unknown";
                if (offer.getSubjectCourse() != null && offer.getSubjectCourse().getName() != null) {
                    courseName = offer.getSubjectCourse().getName();
                }
                
                Object[] row = new Object[5];
                row[0] = courseNumber;
                row[1] = courseName;
                row[2] = enrolled;
                row[3] = "$" + String.format("%,.2f", tuitionPerStudent);
                row[4] = "$" + String.format("%,.2f", totalCollected);
                
                model.addRow(row);
                
            } catch (Exception e) {
                System.err.println("Error processing course for tuition: " + e.getMessage());
            }
        }
        
        lblTotal.setText("Total Revenue: $" + String.format("%,.2f", grandTotal));
        
        if (model.getRowCount() == 0) {
            model.addRow(new Object[]{"-", "No valid course data", 0, "$0.00", "$0.00"});
        }
    }

    public static void main(String[] args) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(TuitionInsightJPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(() -> {
            Business.UniversitySystem testSystem = Business.ConfigureSystem.configure();
            Business.UserAccounts.UserAccount testUser = testSystem.getUserAccountDirectory().getAllAccounts().get(1);
            FacultyProfile faculty = (FacultyProfile) testUser.getProfile();
            new TuitionInsightJPanel(testSystem, faculty).setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefresh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable tableCourses;
    // End of variables declaration//GEN-END:variables
}
